#!/usr/bin/env -S /usr/bin/python -u icicle.py
################################
# Ad-hoc instruction: store the flag in the argument
flag [1337]
# Ad-hoc instruction: store a random value between 0 <= r < 256 in the argument
# For reproducibility reasons, this is always seeded the same
randbyte [7331]
################################

# Use r14 as stack pointer, points at the first *free* cell, grows down
# Use r15 as frame pointer
# r13 holds return addresses
# r0, r1, r2 are argument registers, and are caller-saved
# All other registers are assumed callee-saved

mov r14, 32768
mov r15, r14
add r13, rip, 1
j main
mov r0, 0
j exit

unpack:
## r0 = string
## r1 = target
### returns length in r0
mov [r14], r15
sub r15, r14, 1
mov [r15], r13
sub r14, r15, 1
mov [r14], [7331]
sub r14, r14, 1
mov [r14], r4
sub r14, r14, 1

strint r0, r0
mov r4, 0

_unpack_loop:
jz r0, _unpack_endloop
mod [r1], r0, 256
div r0, r0, 256
add r1, r1, 1
add r4, r4, 1
j _unpack_loop
_unpack_endloop:

mov r0, r4
add r14, r14, 1
mov r4, [r14]
add r14, r14, 1
mov r1, [r14]
sub r1, r1, [7331]
jnz r1, _fail_canary
add r14, r15, 1
mov r13, [r15]
mov r15, [r14]
mov rip, r13

encrypt:
## r0 = target
## r1 = length
## r2 = key
### No return value
mov [r14], r15
sub r15, r14, 1
mov [r15], r13
sub r14, r15, 1
mov [r14], [7331]
sub r14, r14, 1

_encrypt_loop:
jl r1, 0, _encrypt_endloop
xor [r0], [r0], r2
add r2, r2, 1
and r2, r2, 255
add r0, r0, 1
sub r1, r1, 1
j _encrypt_loop
_encrypt_endloop:

add r14, r14, 1
mov r1, [r14]
sub r1, r1, [7331]
jnz r1, _fail_canary
add r14, r15, 1
mov r13, [r15]
mov r15, [r14]
mov rip, r13

repack:
## r0 = ptr
## r1 = length
### Return packed int in r0
mov [r14], r15
sub r15, r14, 1
mov [r15], r13
sub r14, r15, 1
mov [r14], [7331]
sub r14, r14, 1
mov [r14], r4
sub r14, r14, 1

mov r2, 0
_repack_loop:
jl r1, 0, _repack_endloop
mult r2, r2, 256
mov r4, [r0]
or r2, r2, r4
add r0, r0, 1
sub r1, r1, 1
j _repack_loop
_repack_endloop:

mov r0, r2
add r14, r14, 1
mov r4, [r14]
add r14, r14, 1
mov r1, [r14]
sub r1, r1, [7331]
jnz r1, _fail_canary
add r14, r15, 1
mov r13, [r15]
mov r15, [r14]
mov rip, r13

main:
mov [r14], r15
sub r15, r14, 1
mov [r15], r13
sub r14, r15, 1
mov [r14], [7331]
sub r14, r15, 42

pr "Give me your string"
add r13, rip, 1
j newline
pr "> "
readstr r4

pr "Give me your key"
add r13, rip, 1
j newline
pr "> "
readint r5
jl r1, 0, _fail_key

mov r0, r4
sub r1, r15, 41
add r13, rip, 1
j unpack
mov r4, r0

sub r0, r15, 41
mov r1, r4
mov r2, r5
add r13, rip, 1
j encrypt

sub r0, r15, 41
mov r1, r4
add r13, rip, 1
j repack

pr "Your encrypted message is: "
pr r0
add r13, rip, 1
j newline

sub r0, r15, 1
sub r0, [r0], [7331]
jnz r0, _fail_canary
add r14, r15, 1
mov r13, [r15]
mov r15, [r14]
mov rip, r13

_fail_key:
pr "Key should be non-negative"
mov r0, 1
j exit

_fail_canary:
pr "**Stack smashing detected: abort()**"
add r13, rip, 1
j newline
mov r0, 2
j exit

newline:
mov [r14], r0
mov r0, 10
intstr r0, r0
pr r0
mov r0, [r14]
mov rip, r13

flag:
pr [1337]
add r13, rip, 1
j newline
mov r0, 0
j exit

exit:
pr "Exited with status code: "
pr r0
add r13, rip, 1
j newline
